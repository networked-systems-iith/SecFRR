#probablities = [0.516968, 0.118778, 0.088235, 0.081448, 0.050905, 0.035068, 0.037330, 0.029412, 0.024887, 0.016968]
#probablities = [0.068027, 0.047619, 0.059713, 0.030990, 0.015873, 0.019652, 0.016629, 0.012094, 0.010582]
#probablities= [0.718821, 0.068027, 0.047619, 0.059713, 0.030990, 0.015873, 0.019652, 0.016629, 0.012094, 0.010582]
#probablities = [0.71, 0.118778, 0.088235, 0.081448, 0.050905, 0.035068, 0.037330, 0.029412, 0.024887, 0.016968]

# prob0_10 = [0.3529254608602725, 0.16858135185679937, 0.1319796954314721, 0.1341170184344109, 0.06011220945765429, 0.04702110606465402, 0.0336628372962864, 0.03446433342238846, 0.01923590702644937, 0.01790008014961261]
# prob10_20 = [0.610859728506786, 0.13152337858220212, 0.10196078431372549, 0.1248868778280543, 0.051583710407239816, 0.03257918552036199, 0.036500754147812974, 0.02895927601809955, 0.019909502262443438, 0.015987933634992457]
# prob20_30 = [0.6428571428571429, 0.08620689655172414, 0.05541871921182266, 0.07019704433497537, 0.034482758620689655, 0.024630541871921183, 0.03571428571428571, 0.02586206896551724, 0.012315270935960592, 0.012315270935960592]
# prob30_40 = [0.7130434782608696, 0.0463768115942029, 0.0463768115942029, 0.08695652173913043, 0.020289855072463767, 0.03768115942028986, 0.02608695652173913, 0.011594202898550725, 0.008695652173913044, 0.002898550724637681]
# prob40_50 = [0.8666666666666667, 0.07407407407407407, 0.007407407407407408, 0.007407407407407408, 0.007407407407407408, 0.0, 0.022222222222222223, 0.007407407407407408, 0.0, 0.007407407407407408]
# prob50_100 = [0.8557692307692307, 0.057692307692307696, 0.019230769230769232, 0.038461538461538464, 0.009615384615384616, 0.009615384615384616, 0.0, 0.0, 0.009615384615384616, 0.0]

prob0_10 = [0.0915534554046072, 0.09923213230950975, 0.112817483756645, 0.08623744831659776, 0.05847607796810396, 0.045481393975191964, 0.0383933845245127, 0.03130537507383343, 0.03366804489072652, 0.019492025989367986, 0.09214412285883047, 0.07914943886591849, 0.08092144122858831, 0.034258712344949795, 0.0318960425280567, 0.02244536326048435, 0.021854695806261076, 0.012404016538688719, 0.008269344359125812]
prob10_20 = [0.09427312775330396, 0.08869309838472834, 0.0908957415565345, 0.08061674008810572, 0.07694566813509544, 0.059030837004405284, 0.04361233480176212, 0.03979441997063143, 0.03245227606461087, 0.02936857562408223, 0.09427312775330396, 0.0722466960352423, 0.08370044052863436, 0.033920704845814977, 0.02305433186490455, 0.018649045521292217, 0.017767988252569752, 0.01013215859030837, 0.010572687224669603]
prob20_30 = [0.13528212100611828, 0.10740992522093813, 0.08021753908905506, 0.06730115567641061, 0.06662134602311352, 0.07070020394289599, 0.05166553365057784, 0.041128484024473146, 0.028891910265125765, 0.03263086335825969, 0.07885791978246091, 0.061182868796736914, 0.06084296397008838, 0.028891910265125765, 0.020394289598912305, 0.024473147518694765, 0.019034670292318152, 0.013936097892590074, 0.01053704962610469]
prob30_40 = [0.23572744014732966, 0.14426028238182934, 0.10067526089625538, 0.061387354205033766, 0.0570902394106814, 0.039287906691221605, 0.044812768569674644, 0.05156537753222836, 0.022713321055862493, 0.022099447513812154, 0.0521792510742787, 0.03560466543891958, 0.04542664211172499, 0.02332719459791283, 0.014119091467157766, 0.019030079803560467, 0.015346838551258441, 0.008594229588704727, 0.006752608962553714]
prob40_50 = [0.24511082138200782, 0.16427640156453716, 0.11342894393741851, 0.06779661016949153, 0.03129074315514994, 0.03650586701434159, 0.0651890482398957, 0.035202086049543675, 0.027379400260756193, 0.02346805736636245, 0.03259452411994785, 0.03259452411994785, 0.041720990873533245, 0.020860495436766623, 0.02346805736636245, 0.01955671447196871, 0.007822685788787484, 0.007822685788787484, 0.003911342894393742]
prob50_100 = [0.38095238095238093, 0.20238095238095238, 0.08035714285714286, 0.026785714285714284, 0.017857142857142856, 0.026785714285714284, 0.041666666666666664, 0.03869047619047619, 0.011904761904761904, 0.017857142857142856, 0.0744047619047619, 0.005952380952380952, 0.02976190476190476, 0.01488095238095238, 0.005952380952380952, 0.008928571428571428, 0.011904761904761904, 0.0, 0.002976190476190476]

import pandas as pd
# significance_level = 0.05
# df = 9
# critical_value = 16.919

# expected_dist = [p * a for p, a in zip(probablities, avg)]

# print(expected_dist)
##############################################################################################################
import numpy as np
from scipy.stats import chi2_contingency

input = 'E:\\IITH\\BLINK\\CAIDA\\RoutScout\\codes\\bin_csvs\\attack1-new\\60secs-new\\attack-new\\' #'E:\\IITH\\BLINK\\CAIDA\\RoutScout\\codes\\bin_csvs\\normal-new\\' #chi-squared\\prediction_prefix_wise-new\\'
import os
files = os.listdir(input)

for file in files:
    if file.endswith('.csv'):
        df = pd.read_csv(input + file)

        interval_columns = df.columns[1:-2] #[3:-5]  # Assuming the last column is 'Total flows'
        print(interval_columns)

        # Extract the 'Total flows' column
        total_flows = df['total_flows']

        # Initialize a list to store chi-squared statistics for each row
        chi_squared_stats = []



        # Calculate chi-squared statistic for each row
        for index, row in df.iterrows():
            print(row)
            observed_values = row[interval_columns]
            print(observed_values)
            print(total_flows)
            
            #expected_values = [x * total_flows[index] for x in probablities]
            #expected_values = total_flows[index] * probablities  # Use the previously calculated probabilities list
            if total_flows[index] >= 0 and total_flows[index] < 10:
                expected_values = [x * total_flows[index] for x in prob0_10]
            elif total_flows[index] >= 10 and total_flows[index]<20:
                expected_values = [x * total_flows[index] for x in prob10_20]
            elif total_flows[index] >= 20 and total_flows[index]<30:
                expected_values = [x * total_flows[index] for x in prob20_30]
            elif total_flows[index] >= 30 and total_flows[index]<40:
                expected_values = [x * total_flows[index] for x in prob30_40]
            elif total_flows[index] >= 40 and total_flows[index]<50:
                expected_values = [x * total_flows[index] for x in prob40_50]
            else:
                expected_values = [x * total_flows[index] for x in prob50_100]
                
            print(expected_values)
            print(len(observed_values))
            print(len(expected_values))
            # Calculate chi-squared statistic using numpy
            chi_squared_stat = np.sum((expected_values - observed_values) ** 2 / total_flows[index])

            chi_squared_stats.append(chi_squared_stat)

        # Add the chi-squared statistics as a new column to the DataFrame
        df['Chi-squared statistic'] = chi_squared_stats

        # Display the resulting DataFrame with chi-squared statistics
        print(df['Chi-squared statistic'])
        df.to_csv(input+'chi-squared-binned\\'+file)







    


